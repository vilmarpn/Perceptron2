<style>

/* PRINT */

#toc ol {
    font-size: __FONT_SIZE_TEXT__; 
    line-height: 120%; 
    padding: 0; 
    margin-left: __FONT_SIZE_TEXT__; 
    list-style-type: decimal;
}

/* PRINT */
div.text_cell_render table, 
div.text_cell_render  th,
div.text_cell_render  tr,
div.text_cell_render td {
    border: 0px solid black;
}
div.MathJax_Display {padding: 40px 5px 40px 5px}

div.input_area  { padding: 10px;  }

div.input_area  { 
    min-width: 20em !important; 
    overflow-x: hide
} 
div.input_area pre {  
    min-width: 20em !important; 
}


div.input_area  { padding: 10px;  }
.rendered_html p{ text-align: left }
div.input_area>div.highlight  { padding:10px; }

/* FONT_CODE */
.input_area pre { font-size:__FONT_SIZE_CODE__; line-height:120% }

/* FONT_TEXT */
div.text_cell_render { font-size:__FONT_SIZE_TEXT__;  line-height:120% }

/* FONT_QUOTE */
.text_cell_render pre { font-size:__FONT_SIZE_QUOTE__; line-height:120% }

/* BACKGROUND */
div .input_area { background-color:__BACKGROUND__;}
blockquote { background-color:#ffff66; }

/* BUILTIN */
.input_area .highlight .bp { color: __BUILTIN__ } /* Name.Builtin.Pseudo */

/* KEYWORD */
.input_area .highlight .k { color: __KEYWORD__; font-weight: bold } /* Keyword */
.input_area .highlight .kc { color: __KEYWORD__; font-weight: bold } /* Keyword.Constant */
.input_area .highlight .kd { color: __KEYWORD__; font-weight: bold } /* Keyword.Declaration */
.input_area .highlight .kn { color: __KEYWORD__; font-weight: bold } /* Keyword.Namespace */
.input_area .highlight .kp { color: __KEYWORD__; font-weight: bold } /* Keyword.Pseudo */
.input_area .highlight .kr { color: __KEYWORD__; font-weight: bold } /* Keyword.Reserved */
.input_area .highlight .kt { color: __KEYWORD__; font-weight: bold } /* Keyword.Type */
.input_area .highlight .ow { color: __KEYWORD__; font-weight: bold } /* Operator.Word */

/* VARIABLE */
.input_area .highlight pre { color: __VARIABLE__ }
.input_area .highlight .n { color: __VARIABLE__ } /* Name.Variable */
.input_area .highlight .nv { color: __VARIABLE__ } /* Name.Variable */
.input_area .highlight .na { color: __VARIABLE__ } /* Name.Attribute */
.input_area .highlight .no { color: __VARIABLE__ } /* Name.Constant */
.input_area .highlight .nl { color: __VARIABLE__ } /* Name.Label */

/* FUNCTION */
.input_area .highlight .nb { color: __FUNCTION__ } /* Name.Builtin */
.input_area .highlight .nf { color: __FUNCTION__ } /* Name.Function */
.input_area .highlight .vc { color: __FUNCTION__ } /* Name.Variable.Class */
.input_area .highlight .vg { color: __FUNCTION__ } /* Name.Variable.Global */
.input_area .highlight .vi { color: __FUNCTION__ } /* Name.Variable.Instance */
.input_area .highlight .nc { color: __FUNCTION__ } /* Name.Class */
.input_area .highlight .ni { color: __FUNCTION__ } /* Name.Entity */
.input_area .highlight .ne { color: __FUNCTION__ } /* Name.Exception */
.input_area .highlight .nn { color: __FUNCTION__ } /* Name.Namespace */
.input_area .highlight .nt { color: __FUNCTION__ } /* Name.Tag */



/* OPERATOR */
.input_area .highlight .o { color: __OPERATOR__; font-weight:bold } /* Operator */
.input_area .highlight .p { color: __OPERATOR__; font-weight:bold } /* Operator */


/* DECORATOR */
.input_area .highlight .nd { color: __DECORATOR__ } /* Name.Decorator */


/* COMMENT */
.input_area .highlight .c { color: __COMMENT__; font-style: italic } /* Comment */
.input_area .highlight .cm { color: __COMMENT__; font-style: italic } /* Comment.Multiline */
.input_area .highlight .cp { color: __COMMENT__; } /* Comment.Preproc */
.input_area .highlight .c1 { color: __COMMENT__; font-style: italic } /* Comment.Single */
.input_area .highlight .cs { color: __COMMENT__; font-style: italic } /* Comment.Special */


/* NUMBER */
.input_area .highlight .mb { color: __NUMBER__ } /* Literal.Number.Bin */
.input_area .highlight .mf { color: __NUMBER__ } /* Literal.Number.Float */
.input_area .highlight .mh { color: __NUMBER__ } /* Literal.Number.Hex */
.input_area .highlight .mi { color: __NUMBER__ } /* Literal.Number.Integer */
.input_area .highlight .mo { color: __NUMBER__ } /* Literal.Number.Oct */
.input_area .highlight .m { color: __NUMBER__ } /* Literal.Number */
.input_area .highlight .il { color: __NUMBER__ } /* Literal.Number.Integer.Long */

/* STRING */
.input_area .highlight .s { color: __STRING__ } /* Literal.String */
.input_area .highlight .w { color: __STRING__ } /* Text.Whitespace */
.input_area .highlight .sb { color: __STRING__ } /* Literal.String.Backtick */
.input_area .highlight .sc { color: __STRING__ } /* Literal.String.Char */
.input_area .highlight .sd { color: __STRING__; font-style: italic } /* Literal.String.Doc */
.input_area .highlight .s2 { color: __STRING__ } /* Literal.String.Double */
.input_area .highlight .se { color: __STRING__; font-weight: bold } /* Literal.String.Escape */
.input_area .highlight .sh { color: __STRING__ } /* Literal.String.Heredoc */
.input_area .highlight .si { color: __STRING__; font-weight: bold } /* Literal.String.Interpol */
.input_area .highlight .sx { color: __STRING__ } /* Literal.String.Other */
.input_area .highlight .sr { color: __STRING__ } /* Literal.String.Regex */
.input_area .highlight .s1 { color: __STRING__ } /* Literal.String.Single */
.input_area .highlight .ss { color: __STRING__ } /* Literal.String.Symbol */



/********************************************************************************/
/********************************************************************************/

/* JUPYTER */

/* FONT_EDIT */
.cm-s-default span { font-size:__FONT_SIZE_EDIT__; line-height:120% }

/* BACKGROUND_EDIT */
div .cm-s-default { background-color: __BACKGROUND_EDIT__;}

/* CURSOR */
.input_area .CodeMirror div.CodeMirror-cursor { border-left: 5px solid __CURSOR__; }
.input_area .CodeMirror div.CodeMirror-secondarycursor { border-left: 5px solid __CURSOR__;}
.input_area .CodeMirror.cm-fat-cursor div.CodeMirror-cursor { background: __CURSOR__;}
.input_area .cm-animate-fat-cursor { background-color: __CURSOR__; }

/* BUILTIN */
.input_area .cm-s-ipython span.cm-builtin { color: __BUILTIN__ } 
.input_area .cm-s-ipython span.cm-variable-2 { color: __BUILTIN__ } 
.input_area .cm-s-ipython span.cm-variable-3 { color: __BUILTIN__ } 

/* KEYWORD */
.input_area .cm-s-ipython span.cm-keyword { color: __KEYWORD__; font-weight:700 } 

/* VARIABLE */
.input_area span.cm-variable { color: __VARIABLE__ } 
.input_area span.cm-def { color: __VARIABLE__ } 


/* OPERATOR */
.input_area .cm-s-ipython span.cm-operator { color: __OPERATOR__; font-weight:700 } 
.input_area .cm-s-ipython span { color: __OPERATOR__; font-weight:700 } 

/* DECORATOR */
.input_area .cm-s-ipython span.cm-meta { color: __DECORATOR__ } 

/* COMMENT */
.input_area .cm-s-ipython span.cm-comment { color:__COMMENT__; font-style:italic } 

/* NUMBER */
.input_area .cm-s-ipython span.cm-number { color: __NUMBER__ } 

/* STRING */
.input_area .cm-s-ipython span.cm-string { color: __STRING__ } 
.input_area .cm-s-ipython span.cm-string-2 { color: __STRING__ } 

</style><script> 
// Converts integer to roman numeral
function romanize(num) {
    var lookup = {M:1000,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1},
    roman = '',
    i;
    for ( i in lookup ) {
        while ( num >= lookup[i] ) {
            roman += i;
            num -= lookup[i];
        }
    }
    return roman;
}

// Builds a <ul> Table of Contents from all <headers> in DOM
function createTOC(){
    var toc = "";
    var level = 0;
    var levels = {}
    $('#toc').html('');

    $(":header").each(function(i){
        if (this.id=='tocheading'){return;}

        titleText = this.innerHTML;
        openLevel = this.tagName[1];
        if(openLevel>1) {
            openLevel-=1

        if (levels[openLevel]){
            levels[openLevel] += 1;
        } else{
            levels[openLevel] = 1;
        }

        if (openLevel > level) {
            toc += (new Array(openLevel - level + 1)).join('<ol type="1" class="toc">');
        } else if (openLevel < level) {
            toc += (new Array(level - openLevel + 1)).join("</ol>");
            for (i=level;i>openLevel;i--){levels[i]=0;}
        }

        level = parseInt(openLevel);


        if (this.id==''){this.id = this.innerHTML.replace(/ /g,"-")}
        var anchor = this.id;

        toc += '<li><a href="#' + anchor + '">' + titleText
        + '</a></li>';
    }

    });


    if (level) {
        toc += (new Array(level + 1)).join("</ol>");
    }


    $('#toc').append(toc);

};

// Executes the createToc function
setTimeout(function(){createTOC();},100);

// Rebuild to TOC every minute
setInterval(function(){createTOC();},60000);
</script>

